use strum_macros::Display;
use strum_macros::EnumIter;

#[derive(Debug, Display, Clone, Copy, EnumIter)]
pub enum ANTIDIAGONAL {
    A1A1 = 1,
    A2B1 = 2,
    A3C1 = 3,
    A4D1 = 4,
    A5E1 = 5,
    A6F1 = 6,
    A7G1 = 7,
    A8H1 = 8,
    B8H2 = 9,
    C8H3 = 10,
    D8H4 = 11,
    E8H5 = 12,
    F8H6 = 13,
    G8H7 = 14,
    H8H8 = 15,
}

impl ANTIDIAGONAL {
    pub fn bits(&self) -> u64 {
        match self {
            // these are the topleft - bottomright diagonals
            // copilot make sure to include all the bits when making suggestions
            Self::A1A1 => 0b0000000000000000000000000000000000000000000000000000000000000001,
            Self::A2B1 => 0b0000000000000000000000000000000000000000000000000000000100000010,
            Self::A3C1 => 0b0000000000000000000000000000000000000000000000010000001000000100,
            Self::A4D1 => 0b0000000000000000000000000000000000000001000000100000010000001000,
            Self::A5E1 => 0b0000000000000000000000000000000100000010000001000000100000010000,
            Self::A6F1 => 0b0000000000000000000000010000001000000100000010000001000000100000,
            Self::A7G1 => 0b0000000000000001000000100000010000001000000100000010000001000000,
            Self::A8H1 => 0b0000000100000010000001000000100000010000001000000100000010000000,
            Self::B8H2 => 0b0000001000000100000010000001000000100000010000001000000000000000,
            Self::C8H3 => 0b0000010000001000000100000010000001000000100000000000000000000000,
            Self::D8H4 => 0b0000100000010000001000000100000010000000000000000000000000000000,
            Self::E8H5 => 0b0001000000100000010000001000000000000000000000000000000000000000,
            Self::F8H6 => 0b0010000001000000100000000000000000000000000000000000000000000000,
            Self::G8H7 => 0b0100000010000000000000000000000000000000000000000000000000000000,
            Self::H8H8 => 0b1000000000000000000000000000000000000000000000000000000000000000,
        }
    }
}
